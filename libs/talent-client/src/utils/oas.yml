openapi: 3.0.3
info:
  title: Talent Service API
  version: 1.0.0
  description: API for retrieving job information from Talent Service

paths:
  /api/jobs:
    get:
      tags:
        - Talent
      operationId: getJobs
      summary: Get all jobs
      description: Retrieve a list of all available jobs
      responses:
        '200':
          description: List of jobs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Talent
      operationId: createJob
      summary: Create a new job
      description: Create a new job posting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/profiles:
    get:
      tags:
        - Talent
      operationId: getProfiles
      summary: Get profiles by candidate ID
      description: Retrieve profiles for a specific candidate
      parameters:
        - name: candidateId
          in: query
          required: true
          description: Candidate ID to filter profiles
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Profiles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '400':
          description: Bad request - invalid candidate ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Talent
      operationId: createProfile
      summary: Create a new profile
      description: Create a new candidate profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      responses:
        '201':
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Job:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the job
          example: 1
        recruiterId:
          type: integer
          description: ID of the recruiter who created the job
          example: 123
        title:
          type: string
          description: Job title
          example: 'Software Engineer'
        description:
          type: string
          description: Job description
          example: 'We are looking for a software engineer with 3 years of experience in React and Node.js.'
        company:
          type: string
          description: Company name
          example: 'Google'
        location:
          type: string
          description: Job location
          example: 'San Francisco, CA'
        salaryMin:
          type: integer
          description: Minimum salary for the job
          example: 1000
        salaryMax:
          type: integer
          description: Maximum salary for the job
          example: 5000
        benefits:
          type: string
          description: Job benefits
          example: 'Health insurance, 401k, flexible hours'
        skills:
          type: array
          items:
            type: string
          description: Required skills for the job
          example: ['React', 'Node.js', 'TypeScript']
        status:
          type: string
          enum: ['ACTIVE', 'INACTIVE', 'CLOSED']
          description: Current status of the job
          example: 'ACTIVE'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the job was created
          example: '2025-09-14T08:34:55.639Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the job was last updated
          example: '2025-09-14T08:34:55.639Z'

    CreateJobRequest:
      type: object
      required:
        - recruiterId
        - title
        - salaryMin
        - salaryMax
      properties:
        recruiterId:
          type: integer
          description: ID of the recruiter creating the job
          example: 123
        title:
          type: string
          description: Job title
          example: 'Software Engineer'
        description:
          type: string
          description: Job description
          example: 'We are looking for a software engineer with 3 years of experience in React and Node.js.'
        company:
          type: string
          description: Company name
          example: 'Google'
        location:
          type: string
          description: Job location
          example: 'San Francisco, CA'
        salaryMin:
          type: integer
          description: Minimum salary for the job
          example: 1000
        salaryMax:
          type: integer
          description: Maximum salary for the job
          example: 50000
        benefits:
          type: string
          description: Job benefits
          example: 'Health insurance, 401k, flexible hours'
        skills:
          type: array
          items:
            type: string
          description: Required skills for the job
          example: ['React', 'Node.js', 'TypeScript']

    Profile:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the profile
          example: 1
        candidateId:
          type: integer
          description: ID of the candidate who owns this profile
          example: 123
        skills:
          type: array
          items:
            type: string
          description: Candidate's skills
          example: ['React', 'Node.js', 'TypeScript']
        summary:
          type: string
          description: Candidate's professional summary
          example: 'Experienced software engineer with 5 years of experience in full-stack development'
        experience:
          type: array
          items:
            type: string
          description: Candidate's work experience
          example:
            [
              'Software Engineer at Google (2020-2023)',
              'Junior Developer at Startup (2019-2020)',
            ]
        education:
          type: array
          items:
            type: string
          description: Candidate's education background
          example: ['Bachelor of Computer Science - MIT (2015-2019)']
        projects:
          type: array
          items:
            type: string
          description: Candidate's projects
          example:
            [
              'E-commerce platform built with React and Node.js',
              'Mobile app for task management',
            ]
        socialLinks:
          type: array
          items:
            type: string
          description: Candidate's social media and professional links
          example:
            ['https://github.com/username', 'https://linkedin.com/in/username']
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the profile was created
          example: '2025-09-14T08:34:55.639Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the profile was last updated
          example: '2025-09-14T08:34:55.639Z'

    CreateProfileRequest:
      type: object
      required:
        - candidateId
      properties:
        candidateId:
          type: integer
          description: ID of the candidate creating the profile
          example: 123
        skills:
          type: array
          items:
            type: string
          description: Candidate's skills
          example: ['React', 'Node.js', 'TypeScript']
        summary:
          type: string
          description: Candidate's professional summary
          example: 'Experienced software engineer with 5 years of experience in full-stack development'
        experience:
          type: array
          items:
            type: string
          description: Candidate's work experience
          example:
            [
              'Software Engineer at Google (2020-2023)',
              'Junior Developer at Startup (2019-2020)',
            ]
        education:
          type: array
          items:
            type: string
          description: Candidate's education background
          example: ['Bachelor of Computer Science - MIT (2015-2019)']
        projects:
          type: array
          items:
            type: string
          description: Candidate's projects
          example:
            [
              'E-commerce platform built with React and Node.js',
              'Mobile app for task management',
            ]
        socialLinks:
          type: array
          items:
            type: string
          description: Candidate's social media and professional links
          example:
            ['https://github.com/username', 'https://linkedin.com/in/username']

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: 'Internal server error'
        statusCode:
          type: integer
          description: HTTP status code
          example: 500