/* tslint:disable */
/* eslint-disable */
/**
 * Talent Service API
 * API for retrieving job information from Talent Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateJobRequest
 */
export interface CreateJobRequest {
    /**
     * ID of the recruiter creating the job
     * @type {number}
     * @memberof CreateJobRequest
     */
    'recruiterId': number;
    /**
     * Job title
     * @type {string}
     * @memberof CreateJobRequest
     */
    'title': string;
    /**
     * Job description
     * @type {string}
     * @memberof CreateJobRequest
     */
    'description'?: string;
    /**
     * Company name
     * @type {string}
     * @memberof CreateJobRequest
     */
    'company'?: string;
    /**
     * Job location
     * @type {string}
     * @memberof CreateJobRequest
     */
    'location'?: string;
    /**
     * Minimum salary for the job
     * @type {number}
     * @memberof CreateJobRequest
     */
    'salaryMin': number;
    /**
     * Maximum salary for the job
     * @type {number}
     * @memberof CreateJobRequest
     */
    'salaryMax': number;
    /**
     * Job benefits
     * @type {string}
     * @memberof CreateJobRequest
     */
    'benefits'?: string;
    /**
     * Required skills for the job
     * @type {Array<string>}
     * @memberof CreateJobRequest
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateProfileRequest
 */
export interface CreateProfileRequest {
    /**
     * ID of the candidate creating the profile
     * @type {number}
     * @memberof CreateProfileRequest
     */
    'candidateId': number;
    /**
     * Candidate\'s skills
     * @type {Array<string>}
     * @memberof CreateProfileRequest
     */
    'skills'?: Array<string>;
    /**
     * Candidate\'s professional summary
     * @type {string}
     * @memberof CreateProfileRequest
     */
    'summary'?: string;
    /**
     * Candidate\'s work experience
     * @type {Array<string>}
     * @memberof CreateProfileRequest
     */
    'experience'?: Array<string>;
    /**
     * Candidate\'s education background
     * @type {Array<string>}
     * @memberof CreateProfileRequest
     */
    'education'?: Array<string>;
    /**
     * Candidate\'s projects
     * @type {Array<string>}
     * @memberof CreateProfileRequest
     */
    'projects'?: Array<string>;
    /**
     * Candidate\'s social media and professional links
     * @type {Array<string>}
     * @memberof CreateProfileRequest
     */
    'socialLinks'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * Unique identifier for the job
     * @type {number}
     * @memberof Job
     */
    'id'?: number;
    /**
     * ID of the recruiter who created the job
     * @type {number}
     * @memberof Job
     */
    'recruiterId'?: number;
    /**
     * Job title
     * @type {string}
     * @memberof Job
     */
    'title'?: string;
    /**
     * Job description
     * @type {string}
     * @memberof Job
     */
    'description'?: string;
    /**
     * Company name
     * @type {string}
     * @memberof Job
     */
    'company'?: string;
    /**
     * Job location
     * @type {string}
     * @memberof Job
     */
    'location'?: string;
    /**
     * Minimum salary for the job
     * @type {number}
     * @memberof Job
     */
    'salaryMin'?: number;
    /**
     * Maximum salary for the job
     * @type {number}
     * @memberof Job
     */
    'salaryMax'?: number;
    /**
     * Job benefits
     * @type {string}
     * @memberof Job
     */
    'benefits'?: string;
    /**
     * Required skills for the job
     * @type {Array<string>}
     * @memberof Job
     */
    'skills'?: Array<string>;
    /**
     * Current status of the job
     * @type {string}
     * @memberof Job
     */
    'status'?: JobStatusEnum;
    /**
     * Timestamp when the job was created
     * @type {string}
     * @memberof Job
     */
    'createdAt'?: string;
    /**
     * Timestamp when the job was last updated
     * @type {string}
     * @memberof Job
     */
    'updatedAt'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum JobStatusEnum {
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE',
    CLOSED = 'CLOSED'
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
    /**
     * HTTP status code
     * @type {number}
     * @memberof ModelError
     */
    'statusCode'?: number;
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * Unique identifier for the profile
     * @type {number}
     * @memberof Profile
     */
    'id'?: number;
    /**
     * ID of the candidate who owns this profile
     * @type {number}
     * @memberof Profile
     */
    'candidateId'?: number;
    /**
     * Candidate\'s skills
     * @type {Array<string>}
     * @memberof Profile
     */
    'skills'?: Array<string>;
    /**
     * Candidate\'s professional summary
     * @type {string}
     * @memberof Profile
     */
    'summary'?: string;
    /**
     * Candidate\'s work experience
     * @type {Array<string>}
     * @memberof Profile
     */
    'experience'?: Array<string>;
    /**
     * Candidate\'s education background
     * @type {Array<string>}
     * @memberof Profile
     */
    'education'?: Array<string>;
    /**
     * Candidate\'s projects
     * @type {Array<string>}
     * @memberof Profile
     */
    'projects'?: Array<string>;
    /**
     * Candidate\'s social media and professional links
     * @type {Array<string>}
     * @memberof Profile
     */
    'socialLinks'?: Array<string>;
    /**
     * Timestamp when the profile was created
     * @type {string}
     * @memberof Profile
     */
    'createdAt'?: string;
    /**
     * Timestamp when the profile was last updated
     * @type {string}
     * @memberof Profile
     */
    'updatedAt'?: string;
}

/**
 * TalentApi - axios parameter creator
 * @export
 */
export const TalentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new job posting
         * @summary Create a new job
         * @param {CreateJobRequest} createJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (createJobRequest: CreateJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobRequest' is not null or undefined
            assertParamExists('createJob', 'createJobRequest', createJobRequest)
            const localVarPath = `/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new candidate profile
         * @summary Create a new profile
         * @param {CreateProfileRequest} createProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile: async (createProfileRequest: CreateProfileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProfileRequest' is not null or undefined
            assertParamExists('createProfile', 'createProfileRequest', createProfileRequest)
            const localVarPath = `/api/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all available jobs
         * @summary Get all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve profiles for a specific candidate
         * @summary Get profiles by candidate ID
         * @param {number} candidateId Candidate ID to filter profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfiles: async (candidateId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('getProfiles', 'candidateId', candidateId)
            const localVarPath = `/api/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (candidateId !== undefined) {
                localVarQueryParameter['candidateId'] = candidateId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TalentApi - functional programming interface
 * @export
 */
export const TalentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TalentApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new job posting
         * @summary Create a new job
         * @param {CreateJobRequest} createJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(createJobRequest: CreateJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(createJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TalentApi.createJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new candidate profile
         * @summary Create a new profile
         * @param {CreateProfileRequest} createProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfile(createProfileRequest: CreateProfileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProfile(createProfileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TalentApi.createProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all available jobs
         * @summary Get all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TalentApi.getJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve profiles for a specific candidate
         * @summary Get profiles by candidate ID
         * @param {number} candidateId Candidate ID to filter profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfiles(candidateId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Profile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfiles(candidateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TalentApi.getProfiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TalentApi - factory interface
 * @export
 */
export const TalentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TalentApiFp(configuration)
    return {
        /**
         * Create a new job posting
         * @summary Create a new job
         * @param {TalentApiCreateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(requestParameters: TalentApiCreateJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.createJob(requestParameters.createJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new candidate profile
         * @summary Create a new profile
         * @param {TalentApiCreateProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile(requestParameters: TalentApiCreateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.createProfile(requestParameters.createProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all available jobs
         * @summary Get all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs(options?: RawAxiosRequestConfig): AxiosPromise<Array<Job>> {
            return localVarFp.getJobs(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve profiles for a specific candidate
         * @summary Get profiles by candidate ID
         * @param {TalentApiGetProfilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfiles(requestParameters: TalentApiGetProfilesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Profile>> {
            return localVarFp.getProfiles(requestParameters.candidateId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createJob operation in TalentApi.
 * @export
 * @interface TalentApiCreateJobRequest
 */
export interface TalentApiCreateJobRequest {
    /**
     * 
     * @type {CreateJobRequest}
     * @memberof TalentApiCreateJob
     */
    readonly createJobRequest: CreateJobRequest
}

/**
 * Request parameters for createProfile operation in TalentApi.
 * @export
 * @interface TalentApiCreateProfileRequest
 */
export interface TalentApiCreateProfileRequest {
    /**
     * 
     * @type {CreateProfileRequest}
     * @memberof TalentApiCreateProfile
     */
    readonly createProfileRequest: CreateProfileRequest
}

/**
 * Request parameters for getProfiles operation in TalentApi.
 * @export
 * @interface TalentApiGetProfilesRequest
 */
export interface TalentApiGetProfilesRequest {
    /**
     * Candidate ID to filter profiles
     * @type {number}
     * @memberof TalentApiGetProfiles
     */
    readonly candidateId: number
}

/**
 * TalentApi - object-oriented interface
 * @export
 * @class TalentApi
 * @extends {BaseAPI}
 */
export class TalentApi extends BaseAPI {
    /**
     * Create a new job posting
     * @summary Create a new job
     * @param {TalentApiCreateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentApi
     */
    public createJob(requestParameters: TalentApiCreateJobRequest, options?: RawAxiosRequestConfig) {
        return TalentApiFp(this.configuration).createJob(requestParameters.createJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new candidate profile
     * @summary Create a new profile
     * @param {TalentApiCreateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentApi
     */
    public createProfile(requestParameters: TalentApiCreateProfileRequest, options?: RawAxiosRequestConfig) {
        return TalentApiFp(this.configuration).createProfile(requestParameters.createProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all available jobs
     * @summary Get all jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentApi
     */
    public getJobs(options?: RawAxiosRequestConfig) {
        return TalentApiFp(this.configuration).getJobs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve profiles for a specific candidate
     * @summary Get profiles by candidate ID
     * @param {TalentApiGetProfilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentApi
     */
    public getProfiles(requestParameters: TalentApiGetProfilesRequest, options?: RawAxiosRequestConfig) {
        return TalentApiFp(this.configuration).getProfiles(requestParameters.candidateId, options).then((request) => request(this.axios, this.basePath));
    }
}



